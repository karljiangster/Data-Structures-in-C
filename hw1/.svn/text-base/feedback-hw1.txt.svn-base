_total-score_ 97/100
AUTOMATIC GRADING (bjr)

TESTS : 

-------------------------
Test: area_box(5,5,5); expecting : 150
Point Value: 3
PASSED :  + 3/3 pts
-------------------------

-------------------------
Test: area_box(7,7,7); expecting : 294
Point Value: 3
PASSED :  + 3/3 pts
-------------------------

-------------------------
Test: area_box(10,8,8); expecting : 448
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: area_box(11,11,9); expecting : 638
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: area_box(12,15,12); expecting : 1008
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: area_box(3,5,9); expecting : 174
Point Value: 3
PASSED :  + 3/3 pts
-------------------------

-------------------------
Test: digit_letters(0); expecting 4
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: digit_letters(1); expecting 3
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: digit_letters(2); expecting 3
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: digit_letters(3); expecting 5
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: digit_letters(4); expecting 4
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: digit_letters(5); expecting 4
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: digit_letters(6); expecting 3
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: digit_letters(7); expecting 5
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: digit_letters(8); expecting 5
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: digit_letters(9); expecting 4
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(1000); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(10000); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(0); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(50); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(7520); expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(7590); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(3520); expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(3585); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(3530); expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(3590); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(4811); expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(4837); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(4812); expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(4890); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: valid_room(4911); expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: rotary_pulses(5511555155); expecting 38
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: rotary_pulses(3333333333); expecting 30
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: rotary_pulses(7744774477); expecting 58
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: rotary_pulses(6688668866); expecting 68
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: rotary_pulses(9922992299); expecting 62
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: rotary_pulses(1234567891); expecting 46
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: rotary_pulses(1234567892); expecting 47
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: rotary_pulses(1234567893); expecting 48
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: rotary_pulses(9876543214); expecting 49
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: rotary_pulses(1000000000); expecting 91
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Expecting error: digit_letters(10); expecting error
Point Value: 3
FAILED: Expected error not found.
-------------------------

-------------------------
Expecting error: digit_letters(999); expecting error
Point Value: 2
PASSED: Found expected error.
-------------------------

-------------------------
SUMMARY 
Total : 57/60

;; === style ===



;; well-written purposes              4/ 4

;; proper indentation, line breaks    4/ 4

;; well-named variables               4/ 4

;; well-chosen types                  4/ 4

;; adequate tests                     12/ 12
;;==> In the future please just use the typical testing format
(3 each function)

;; using subversion correctly         4/ 4



;; === efficiency ===

;; proper abstraction through functions 0/ 0

;; avoiding blatant inefficiency    8/ 8



;; style _subtotal_:                40/ 40


;; graded by kosydney

===.h===
/* area_box : Returns the outside surface area of the box
 * given dimensions. If any of the parameters are invalid, returns -1 
 */
double area_box(double width, double height, double depth);

/* digit_letters : returns num of letters in english word of 
 * given single digit
 */ 
unsigned int digit_letters(unsigned int digit);


/* valid_room : determines if room number is valid */ 
int valid_room(unsigned int room); 

/* rotary_pulses: returns num of pulses of the given telephone number */ 
unsigned int rotary_pulses(unsigned long long int phone_num);  

===evidence===
 /* Karl Jiang, karljiang 
 * CS 152, win 2016 
 * hw1 
 */  

#include <stdio.h> 
#include <stdlib.h> 
#include "hw1.h" 
 

void evidence_area_box() {

    printf("Testing Area Box. \n"); 
    double wid[] = {2, 4.5, 0.1, 0};  
    double heit[] = {1, 7.8, 0.7, 6};
    double dpth[] = {1, 9.5, 0.1, 7.6}; 
    double exptd[] = {10, 303.9, 0.3, -1};
    //-1 this shouldnt run anyways since the wid is 0      

    for(int i = 0; i < 4; ++i) { 
	printf("expected: %12f | actual: %12f \n", exptd[i], area_box( wid[i],
						 heit[i], dpth[i]) );   
    } 
} 

void evidence_digit_letters() { 

    printf("\nTesting digit_letters \n"); 
    // array of counts of each digit. Ie. 0: a[0] = 4 since "zero" has 4 letters 
    int digits[] = {0, 1, 5, 9}; 
    int expt[] = {4, 3, 4, 4}; 
    for(int i = 0; i < 4; ++i) { 
	printf("expected %8u | actual: %8u \n", expt[i], digit_letters(digits[i]) ); 
    }  
    // printf("expected: ERROR on %d", digit_letters(22) ); 
    
} 


void evidence_valid_room() { 
    
    printf("\nTesting valid_room \n"); 
    int floor_nums[] = {0, 100, 101, 233, 1000, 2033, 
			    4836, 4837, 4901, 4955, 9921, 
			    9924, 10000, 45345, -10}; 
    int expt[] = {0, 0, 1, 1, 0, 1, 1, 0, 0, 0, 1, 1, 0, 0, 0}; 
    
    for(int i = 0; i < 14; ++i) {  
	printf("expected %8d | actual: %8d \n", expt[i], valid_room( floor_nums[i] ) );   
    } 
} 


void evidence_rotary_pulses() { 

    printf("\nTesting rotary_pulses. \n"); 
    unsigned long long int numbers[] = {2039797408, 7737021234,
					 4540450434, 50000};
    int expt[] = {2 + 10 + 3 + 9 + 7 + 9 + 7 + 4 + 10 + 8, 46, 
		    4 + 5 + 4 + 10 + 4 + 5 + 10 + 4 + 3 + 4, 
		    5 + 10 * 4};
    for(int i = 0; i < 4; ++i) { 
    	printf("expected %8d | actual: %8d \n", expt[i], rotary_pulses( numbers[i] ) );   
    }     
} 

int main(int argc, char *argv[]) { 
    
    evidence_area_box(); 
    evidence_digit_letters(); 
    evidence_valid_room(); 
    evidence_rotary_pulses(); 
    return 0; 
} 

===hw1.c===
/* Karl Jiang, karljiang 
 * CS 152, win 2016 
 * hw1 
 */ 

#include <stdio.h> 
#include <stdlib.h> 

//array used in digit_letters, contains counts of single digit nums
int digit_counts[10] = {4, 3, 3, 5, 4, 4, 3, 5, 5, 4};

 /* area_box : Returns the outside surface area of the box
  * given dimensions. If any of the parameters are invalid, returns -1  
  */
double area_box(double width, double height, double depth) { 

    if(width <= 0 || height <= 0 || depth <= 0) {  
	fprintf(stderr, "At least one of the parameters are not valid."); //this should be tabbed in
    } 
    return 2 * (width * height + width * depth + height * depth);  

}

/* digit_letters : returns num of letters in english word of
 * given single digit
 */
unsigned int digit_letters(unsigned int digit) { 

    if(digit > 10) { 
	fprintf(stderr, "%u is more than one digit.", digit); //this should be tabbed in
	exit(1); //this should be tabbed in
    } 
    return digit_counts[digit]; 
} 


/* valid_room : determines if room number is valid */
int valid_room(unsigned int room) { 
    
    if(room <= 100) 
	return 0;//this should be tabbed in
    int room_num = room % 100;
    if(room <= 4836) 
	return room_num >= 1 && room_num <= 36;  //this should be tabbed in
    if(room <= 9924) 
	return room_num >= 12 && room_num <= 24; //this should be tabbed in
    return 0; 
} 


/* rotary_pulses: returns num of pulses of the given telephone number */
unsigned int rotary_pulses(unsigned long long int phone_num) { 

    if(!phone_num) 
	return 0; //this should be tabbed in
    int curr_digit = phone_num % 10; 
    if(!curr_digit)    
	return 10 + rotary_pulses(phone_num / 10);  //this should be tabbed in
    return curr_digit + rotary_pulses(phone_num / 10); 
} 

 
 
