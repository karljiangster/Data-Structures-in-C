hw5 _total_: 	95/100
;; === correctness ===
;; automatic grading by nverhaaren


;; intlist_remove_nth                             10 / 12
-2 - failed on items at start


;; inttree_inorder_show                           7 / 7


;; inttree_aggregate                              9 / 9


;; inttree_apply                                  7 / 7


;; make_tree                                      13 / 13

;; decode was tested with a grader-generated tree similar to the example
;; but with different letters

;; decode                                         12 / 12

;; correctness _subtotal_:                              58 / 60


;; === style ===

;; development process						8/ 8
;; adequate tests							4/ 4


;; === overall style ===			11/12

;; well-written purposes              		2/ 2
;; proper indentation, line breaks    		1/ 2
;; well-named variables, functions    		2/ 2
;; well-chosen types                  		2/ 2
;; good design decisions    		  		2/ 2
;; avoiding blatant inefficiency      		2/ 2


;; === per-function choices === 	14/16

;; remove_nth								2/2
	-2 - did not free node
;; inttree functions						6/6
	-2 - did not use recursion (2pts each function)
;; make_tree								2/2
	-2 - did not use recursion 
;; decode									4/6
	-2 - did not use recursion
	-2 - did not calculate precise size of output message
	-2 - did not heap allocate output string


;; style _subtotal_:                37/40


;; graded by sayris


======== hw5.h ========
#ifndef __HW5_H__ 
#define __HW5_H__

typedef struct intlist intlist;

struct intlist {
    int val;
    intlist* next;
};


/* removes the nth element from the linked list.
 * returns the head pointer for the resulting list
 * if index is beyond the end of the list, raise an error and exit.
 * free the list cell that held the now-removed element
 */  
intlist* intlist_remove_nth(intlist* xs, unsigned int n);

typedef struct inttree inttree;

struct inttree {
    int val;
    inttree *left, *right;
};


/* in-order traversal. traverses its left subtree, 
 * then prints the node's value, then traverses the right subtree.
 * Seperate by single space
 */ 
void inttree_inorder_show(inttree* t);

/* modifies the tree to aggregate its values upwards. 
 * node's value is updated to be the sum of its original value 
 * and the aggregated values of its subtrees.
 * returns the aggregated value of the root node.
 */ 
int inttree_aggregate(inttree* t);


/* modifies the provided tree by updating the value 
 * at each node to be the result obtained by calling 
 * the passed-in function (represented by a function pointer) 
 * on the original value for that node.
 */
void inttree_apply(inttree* t, int (*f)(int));

typedef struct tagged_tree tree;

struct node {
    tree *left, *right;
};

union tree_union {
    struct node node;
    char leaf;
};

typedef enum tree_tag tree_tag; 

enum tree_tag {
    NODE, LEAF
};

struct tagged_tree {
    enum tree_tag tag;
    union tree_union u;
};

/* prints out contents of in order tree. for debugging purposes */ 
void print_tree(tree* t); 

/* reconstructs a binary tree based on a string containing the
 * character values of the leafs of this special type of tree,
 * read left-to-right. If string len is not power of 2, err -> exit */ 
tree* make_tree(char* leafs);

/* decodes the specified message, using the provided key. 
 * resulting string should be heap-allocated 
 */ 
char* decode(tree* key, char* cipher);

#endif /* __HW5_H__ */ 
 
======== hw5.c ========
/* Karl Jiang, karljiang  
 * HW5 WIN 2016 
 */ 

#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#include "hw5.h" 

/* helper function for intlist_remove_n
 * changes pointer of tmp to next next. Frees skipped 
 */ 
void _rmv_intlist(intlist* tmp) { 
    
    intlist* willdie = tmp -> next; 
    tmp -> next = tmp -> next -> next;
    free(willdie);   
} 


/* removes the nth element from the linked list.
 * returns the head pointer for the resulting list
 * if index is beyond the end of the list, raise an error and exit.
 * free the list cell that held the now-removed element
 */  
intlist* intlist_remove_nth(intlist* xs, unsigned int n) { 

    intlist* tmp = xs; 
   
    if(tmp == NULL) { 
        //gc: indentation
	fprintf(stderr, "Out of Bounds."); 
	exit(1);     
    } 
    if(n == 0) { 
        // gc: indentation
	free(xs); 
	return tmp -> next;
    } 	

    int i = 1; //removing the ith element, i == n  
    while(tmp -> next != NULL) { 
	if(i == n) { 
	    _rmv_intlist(tmp); 
	    return xs;    
	} 
	tmp = tmp -> next; 
	i++; 
    }

    //printf("i: %d", i); 
    fprintf(stderr, "Out of Bounds."); 
    exit(1);     
	
    return xs; 

} 


/* in-order traversal. traverses its left subtree, 
 * then prints the node's value, then traverses the right subtree.
 * Seperate by single space
 */ 
void inttree_inorder_show(inttree* t) { 

    if(t == NULL) 
	return; 
    inttree_inorder_show(t -> left); 
    printf("%d ", t -> val); 
    inttree_inorder_show(t -> right); 

} 

/* modifies the tree to aggregate its values upwards. 
 * node's value is updated to be the sum of its original value 
 * and the aggregated values of its subtrees.
 * returns the aggregated value of the root node.
 */ 
int inttree_aggregate(inttree* t) { 
   
    if(t == NULL) 
       return 0; 
    int sum = t -> val; 
    if(t -> left != NULL) { 
	inttree_aggregate(t -> left); 
	sum += t -> left -> val;
    } 	
    if(t -> right != NULL) { 
	inttree_aggregate(t -> right); 
	sum += t -> right -> val; 
    } 
    t -> val = sum;     
    return sum; 
} 

/* modifies the provided tree by updating the value 
 * at each node to be the result obtained by calling 
 * the passed-in function (represented by a function pointer) 
 * on the original value for that node.
 */
void inttree_apply(inttree* t, int (*f)(int)) { 
    
    if(t == NULL) 
	return; 
    t -> val = f(t -> val);
    if(t -> left != NULL)
	inttree_apply(t -> left, f); 
    if(t -> right != NULL)
	inttree_apply(t -> right, f); 	  
    
} 


/* checks if a int a power of 2 */ 
void _is_power_two(int n) { 
    
    int original = n; 
    if(n == 0) { 
	fprintf(stderr, "string cannot be empty. \n");
	exit(1); 	
    } 

    while(n > 1) { 
	if(n % 2) { 
	    fprintf(stderr, "%d must be a power of 2. \n", original); 
	    exit(1); 
	} 
	n = n / 2; 
    } 
}


/* constructs a leaf tree */ 
tree* _tree_leaf_cons(char s) { 

    tree* leaf = (tree*) malloc(sizeof(tree)); 
    leaf -> tag = LEAF; 
    leaf -> u.leaf = s;
    return leaf; 
} 


/* constructs a tagged_tree node.
 * Assumes left and right are NOT null 
 */ 
tree* _tree_node_cons(tree* left, tree* right) { 
    
    tree* tr = (tree*) malloc(sizeof(tree)); 
    tr -> tag = NODE; 
    tr -> u.node.left = left; 
    tr -> u.node.right = right;
    return tr; 
}

/* prints out contents of in order tree. for debugging purposes */ 
void print_tree(tree* t) { 
    
    if(t == NULL) {  
        return; 
    } 
    if(t -> tag == NODE) {
	print_tree(t -> u.node.left);
	print_tree(t -> u.node.right);	
    }   
    else {
	if(t)
	    fprintf(stderr, "|%c|", t -> u.leaf); 
    } 	
} 

/* reconstructs a binary tree based on a string containing the
 * character values of the leafs of this special type of tree,
 * read left-to-right. If string len is not power of 2, err -> exit 
 */
tree* make_tree(char* leafs) { 
   
    if(leafs == NULL) { 
	fprintf(stderr, "no null strings, please."); 
	exit(1); 
    } 	
    int len = strlen(leafs); 

    if(len == 1) { 
	return _tree_leaf_cons(*leafs); 
    }

    _is_power_two(len);  
    
    char left [len / 2 + 1]; 
    memcpy(left, leafs, len / 2); 
    left[len / 2] = '\0';

    tree* left_tr = make_tree(left); 
    tree* right_tr = make_tree(leafs + len / 2);
    return _tree_node_cons(left_tr, right_tr);  
} 


/* tests to see if the tree is valid, that is, 
 * it is not null or is just a lead 
 */ 
void _valid_tree(tree* key) { 

    if(key == NULL) { 
	fprintf(stderr, "Tree is null\n."); 
	exit(1); 
    } 
    if(key -> tag == LEAF) { 
	fprintf(stderr, "Impossible to decode with one letter.\n"); 
	exit(1); 
    } 
} 

/* decodes the specified message, using the provided key. 
 * resulting string should be heap-allocated 
 */ 
char* decode(tree* key, char* cipher) { 

    _valid_tree(key); 
    if(cipher == NULL) 
	return NULL; 
    int i = 0; //to parse thru cipher 
    tree* spot = key; 
    char code [strlen(cipher) + 1];
    int index = 0;
    
    
    while(cipher[i] != '\0') { 	    
	 
	if(cipher[i] == 'L') { 
	    spot = spot -> u.node.left;  
	} 
	if(cipher[i] == 'R') { 
	    spot = spot -> u.node.right; 
	} 

	if(spot -> tag == LEAF) { 
	    code[index] = spot -> u.leaf; 
	    ++index; 
	    spot = key;  
	}
	++i; 	
    }  
    code[index] = '\0';     
    return strdup(code); 
} 

 
======== evidence_hw5.c ========
/* Karl Jiang, karljiang  
 * HW5 WIN 2016 
 */ 

#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#include "hw5.h" 

/* helper functions for testing intlist remove nth */ 
intlist* intlist_con(int val, intlist* next) { 

    intlist* rv = malloc(sizeof(rv)); 
    rv -> val = val; 
    rv -> next = next; 
    return rv; 
} 


/* print for checking */ 
void print_intlist(intlist* ll, int len) { 

    intlist* tmp = ll; 

    for(int i = 0; i < len; ++i) { 
	printf("%d ", tmp -> val); 
	tmp = tmp -> next; 
    } 
    puts(" "); 
} 


/* test intlist remove */ 
void evidence_intlist_remove_nth() { 
    
    printf("TESTING INTLIST REMOVE NTH\n\n"); 

    intlist* test = intlist_con(0, NULL); 
    for(int i = 1; i < 4; ++i) { 
	test = intlist_con(i, test); 
    } 
    
    printf("test: "); 
    print_intlist(test, 4); 
    
    
    //zero element 
    intlist* zero = intlist_remove_nth(test, 0); 
    printf("expected: 2 1 0\t|actual: "); 
    print_intlist(zero, 3);
       
    //middle 
    intlist* mid = intlist_remove_nth(zero, 1); 
    printf("expected: 2 0\t|actual: "); 
    print_intlist(mid, 2); 
  
    //end 
    intlist* end = intlist_remove_nth(mid, 1); 
    printf("expected: 2 \t|actual: "); 
    print_intlist(end, 1); 

    /*     
    //outside 
    intlist* outside = intlist_remove_nth(end, 3); 
    print_intlist(outside, 2); //this should NOT run 
      
    //empty case 
    intlist* empty = NULL; 
    intlist* still_empty = intlist_remove_nth(empty, 0);   
    print_intlist(still_empty, 0);
    */ 
    puts(" "); 
} 


/* helper for inttree order show - constructs tree */ 
inttree* inttree_cons(int val, inttree* left, inttree* right) { 

    inttree* tr = (inttree*) malloc(sizeof(inttree)); 
    tr -> val = val; 
    tr -> left = left; 
    tr -> right = right; 
    return tr; 
} 

/* function to be used in testing apply */ 
int increment(int val) { 

    return val + 1; 
} 


/* test for inttree functions
 * case1: NULL, case2: both left and right, case3: left only 
 * case4: right only, case5: leaf 
 */ 
void evidence_inttree() { 

    printf("TESTING INTTREE FUNCTIONS\n\n"); 
    //left hand example from problem description 
    //covers left only, both left an right, leaf
    inttree* one = inttree_cons(1, NULL, NULL); 
    inttree* seven = inttree_cons(7, NULL, NULL); 
    inttree* three = inttree_cons(3, one, seven);  
    inttree* two = inttree_cons(2, NULL, NULL); 
    inttree* left = inttree_cons(1, three, two); 
    inttree* right = inttree_cons(7, NULL, NULL); 
    inttree* tr = inttree_cons(2, left, right); 

    //below tree covers right only 
    inttree* rightnode = inttree_cons(5, NULL, NULL); 
    inttree* righttr = inttree_cons(7, NULL, rightnode); 
    
    printf("expected: 1 3 7 1 2 2 7\nactual: "); 
    inttree_inorder_show(tr); 
    puts(" "); 

    printf("expected: 7 5\nactual: "); 
    inttree_inorder_show(righttr); 
    puts(" "); 

    int aggregate = inttree_aggregate(tr); 
    printf("expected: 23\t|actual:  %d\n", aggregate);
    printf("expected: 1 11 7 14 2 23 7\nactual: "); 
    inttree_inorder_show(tr); 
    puts(" ");  

    int agr_righttr = inttree_aggregate(righttr); 
    printf("expected: 12\t|actual: %d\n", agr_righttr); 
    printf("expected: 12 5\nactual: "); 
    inttree_inorder_show(righttr); 
    puts(" ");

    //test apply 
    inttree_apply(tr, increment); 
    printf("expected: 2 12 8 15 3 24 8\nactual: "); 
    inttree_inorder_show(tr); 
    puts(" "); 

    inttree_apply(righttr, increment); 
    printf("expected: 13 6\nactual: "); 
    inttree_inorder_show(righttr); 
    puts(" "); 

} 


/* evidence for make_tree function */ 
void evidence_make_tree() { 

    printf("\n\nTESTING MAKE TREE\n\n"); 

    //case 0: very simple case 
    char* case0 = "ABC "; 
    tree* simple = make_tree(case0);
    print_tree(simple); 
    puts(" "); 

    //case 1: from example - string works 
    char* case1 = "ABDEIKLSNORTUVY ";
    tree* example = make_tree(case1); 
    print_tree(example); 
    puts(" ");

    //case 1.5: only leaf
    char* single = "A"; 
    tree* tr_single = make_tree(single); 
    print_tree(tr_single); 
    puts(" ");  

    //case 2: rando non power of case
    /* char* case2 = "WONT WORK ";
    tree* nonpower = make_tree(case2); 
    print_tree(nonpower); 
    puts(" "); 
    */  
    
    //case 3: empty. Shouldn't run. 
    /* char* empty_case = ""; 
    tree* empty = make_tree(empty_case);
    print_tree(empty); 
    puts(" "); */ 

    //case 4: NULL 
    /* char* nullstr = NULL; 
    tree* death = make_tree(nullstr); 
    print_tree(death); 
    puts(" "); */  
}   


/* evidence for decode */ 
void evidence_decode() { 
   
    printf("\n\nTESTING DECODE\n\n"); 
    //declare trees  
    char* tree_ex = "ABDEIKLSNORTUVY ";
    tree* example = make_tree(tree_ex);

    char* smpl = "ABC "; 
    tree* simple = make_tree(smpl);
   
      
    //case 0: - using tree from before. Covers chars other than L, R 
    char* message = "LLLR LLRR RRRR LRRR RRLL RLRL LLRR RRRR RLRR RLLR RRRR\
    LLRL RLRL LRLL RLLL LRLR RRRR RRRL RLLR RRLL RLRL RRRR RLLR RRLR LLLL LRRL\
    RLRR LRLL RLLL LLRR";
    char* msg_example = decode(example, message); 
    printf("%s\n", msg_example);

    //case 1: event where we run out of characters, but not at leaf
    char* extra_cypher = "LLL "; 
    char* extra_cyph_code = decode(simple, extra_cypher);
    printf("expected: A\nactual: ");  
    printf("%s\n", extra_cyph_code);  
    
    //case 2: empty string 
    char* empty_string = ""; 
    char* empty_decode = decode(simple, empty_string); 
    printf("expected: \nactual: "); 
    printf("%s\n", empty_decode);     


    //case 3: jank tree - not evenly spread. 
    tree* jank = make_tree("ABC "); 
    jank -> u.node.left -> u.node.left = make_tree("ABC ");
    char* jank_msg = "L L L L | R L|LLRL"; 
    char* jank_code = decode(jank, jank_msg); 
    printf("expected: ACC\nactual: "); 
    printf("%s\n", jank_code);

    //case 4: impossible tree NULL 
    //tree* null = NULL; 
    //char* null_error = decode(null, extra_cypher); 

    //case 5: impossible with only one letter
    /* tree* one = malloc(sizeof(tree));
    one -> tag = LEAF; 
    one -> u.leaf = 'A'; 
    char* one_error = decode(one, extra_cypher);     
    */ 
}  


int main() { 

    evidence_intlist_remove_nth(); 
    evidence_inttree();
    evidence_make_tree();  
    evidence_decode(); 
} 


 
======== Makefile ========
ev: hw5.h hw5.c evidence_hw5.c
	clang -Wall -o ev hw5.c evidence_hw5.c
	clang -Wall -o ev hw5.c evidence_hw5.c
