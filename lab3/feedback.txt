_total score_ 100 / 100 

;; === correctness ===

;; === correctness ===
;; dist                          25/25
+3 - correct answer for horizontal line, x0,y0 < x1,y1
   - input:0, 0, 100, 0, Answer: 100

+3 - correct answer for horizontal line, x0,y0 > x1,y1
   - input:30, 3, 0, 3, Answer: 30

+3 - correct answer for vertical line, x0,y0 < x1,y1
   - input:1, 0, 1, 10, Answer: 10

+3 - correct answer for vertical line, x0,y0 > x1,y1
   - input:4, 50, 4, 0, Answer: 50

+3 - correct answer for 45 deg line, x0, y0 < x1, y1
   - input:1, 1, 5, 5, Answer: 5.6569

+5 - correct answer for random line, x0, y1 > x1, y0
   - input:4, 1, 2, 3, Answer: 2.8284

+5 - correct answer for random line, x0, x1 < y0, y1
   - input:1, 2, 4, 6, Answer: 5

;; draw_waves                     25/25
+10 - correct for 0,0 in the middle
+5 - correct for 0,0 in a corner
+5 - correct for 0,0 in some random spot
+5 - correct for 0,0 in some random spot
;; correctness _subtotal_:				50/50

;; graded by Maria Hyun

# === style ===

# development process            10 / 10
-4 - compiled properly with their own files
-4 - functions are complete and in the appropriate files
-4 - using subversion correctly     
-10 - required editing their code (to do more than problems above)
(take off no more than 10)

# adequate tests                    5  / 5
(no helper function tests necessary)
(tests should be modularized)

# well-written purposes              4 / 4
# proper indentation, line breaks    4 / 4
# well-named variables            4 / 4
# well-chosen types           4 / 4

# === efficiency ===
# make sure to grade their test code for efficiency, as well

# proper abstraction through functions 8 / 8
-3 - instance of repeated code in multiple functions - make function
-2 - many helper functions (more than 4)
# good programming practices / norms    5 / 5

# avoiding blatant inefficiency    6 / 6
 -1 - used exponent or power functions 
 -2 - inappropriate control structure
 -2 - function call in for loop bounds for static answer
 -2 - repeated function calls with same input and same result
 -3 - no recursion warranted
(take off no more than 6)

# style _subtotal_:         50 / 50


# graded by Jiajun Shen


/* Returns the distance between the points (x0, y0) and (x1, y1) */
double dist(double x0, double y0, double x1, double y1);

/* Generates a side_length x side_length image in ppm text 
* to the console. The ppm should resemble a wave where colors 
* are based off its distance from the offset center. 
*/ 
void draw_waves(int side_length, int x_offset, int y_offset);
/* Karl Jiang, karljiang 
* CS 152, Winter 2016
* Lab 3 
*/ 

#include <stdio.h> 
#include <stdlib.h> 
#include <math.h> 

/* Returns the distance between (x0, y0) and (x1, y1) */ 
double dist(double x0, double y0, double x1, double y1) { 

    double x = x1 - x0; 
    double y = y1 - y0; 
    
    return sqrt(x * x + y * y); 
}

 
/* Prints the proper RGB value for draw_waves. */ 
void rgb_print(int x, int y, int xc, int yc) { 

    double sin_res = sin( dist(x, y, xc, yc) ); 
    int col_b = (int) ( (sin_res + 1) * 255 / 2);  	
    printf("0 0 %d", col_b); 
}

 
/* Generates a side_length x side_length image in ppm text
* to the console. The ppm should resemble a wave where colors
* are based off its distance from the offset center.
*/
void draw_waves(int side_length, int x_offset, int y_offset) { 

    if(side_length <= 0) { 
	fprintf(stderr, "Please input a side length that is more than 0."); 
	exit(1); 
    } 
 
    printf("P3\n"); 
    printf("%d %d\n", side_length, side_length); 
    printf("255\n"); 
    
    int center_x = side_length / 2 + x_offset; 
    int center_y = side_length / 2 + y_offset; 
    
    for(int i = 0; i < side_length; ++i) { 
	for(int j = 0; j < side_length; ++j) { 
	    rgb_print(i, j, center_x, center_y); 
	    printf("\n"); 
	} 
    } 

} 


/* Karl Jiang, karljiang
* CS 152 Winter 
* Lab 3 
*/ 

#include <stdio.h> 
#include <stdlib.h> 
#include "waves.h" 

void evidence_dist() {

    double x0 [] = {-4.7, -2, 0, 1, 5.7};
    double y0 [] = {-8.7, 7.8, 8, 14, -8.6};  
    double x1 [] = {-4.7, -3, 9.5, 0.999, 6};  
    double y1 [] = {-8.7, 7.8, 8.001, 1, 5.7}; 

    double expt [] = {0, 1, 9.5000001, 13.000000038, 14.3031465}; 
    int cases = 5; 

    for(int i = 0; i < cases; ++i) { 
	printf("expected: %f \t\t| actual: %f \n", expt[i], 
	    dist( x0[i], y0[i], x1[i], y1[i] ) ); 
    }  

} 


int main() { 
    
    evidence_dist(); 
} 
