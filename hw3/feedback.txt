_total-score_ 104 / 104

AUTOMATIC GRADING (bjr)

TESTS : 

-------------------------
Test: all_positive (mix of negative and positive) : expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: all_positive (all positive) : expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: all_positive (all negative) : expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: all_positive (all positive & some zero) : expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: all_positive (all positive except for last) : expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: exists_positive (all negative) : expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: exists_positive (all 0's and negative) : expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: exists_positive (all negative except last) : expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: exists_positive (all positive) : expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: exists_positive (all negative except positive in middle) : expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: first_positive (only positive at index 0) : expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: first_positive (only positive at last index) : expecting 4
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: first_positive (several positives in the middle) : expecting 1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: first_positive (no positives) : expecting -1
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: number_positives (no positives) : expecting 0
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: number_positives (all positives) : expecting 5
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: number_positives (mix negative and positive) : expecting 3
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: number_positives (mix negative, positive, zero) : expecting 1
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: negate (start positive)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: negate (start negative)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: negate (random)
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: negate (alen = 1)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: partial_sums ([0,1,2,3,4]) : expecting [0,0,1,3,6,10]
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: partial_sums ([1,2,3,4,5]) : expecting [0,1,3,6,10,15]
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: rotate_right ([1,2,3,4,5]) : expecting [5,1,2,3,4]
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: rotate_right ([1,2,3,4,5,6,7,8,9,10]) : expecting [10,1,2,3,4,5,6,7,8,9]
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: rotate_right ([1]) : expecting [1]
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: factorization (30) : expecting [2,3,5]
Point Value: 4
PASSED :  + 4/4 pts
-------------------------

-------------------------
Test: factorization (8) : expecting [2,2,2]
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: factorization (8) : expecting [2,2,2], updated flen
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: decode ([8,5,12,12,15) : expecting HELLO
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: decode [8,5,12,12,15,0,23,15,18,12,4] : expecting HELLO WORLD
Point Value: 3
PASSED :  + 3/3 pts
-------------------------

-------------------------
Expecting error: factorization (8, array too small) : expecting error
Point Value: 1
PASSED: Found expected error.
-------------------------

-------------------------
Expecting error: decode [8,5,12,12,15,27] : expecting error
Point Value: 3
PASSED: Found expected error.
-------------------------

-------------------------
SUMMARY 
Total : 49/49
;; === style ===

;; development process               8 / 8
-10 - compiled properly with their own files but not with ours
-4 - used subversion incorrectly (missing file, forgot to commit, etc.)
-15 - did not compile with ours or their makefile
(take off no more than 15)
(in this category, they can lose more than 8 points. They get 8 points
for doing it properly)

;; adequate tests                   5 / 5

;; === overall style === ;;

;; well-written purposes            3 / 3
;; proper indentation, line breaks  3 / 3
;; well-named variables, functions  3 / 3
;; well-chosen types                3 / 3
;; proper abstraction through functions 3 / 3
;; avoiding blatant inefficiency  6 / 6
 -2 - function call in for loop bounds for static answer
 -2 - repeated function calls with same input and same result
 -2 - inappropriate control structure (if not counted in function below)

;; === per-function choices === ;;

;; all_positive				1 / 1
-1 - didn't return early if answer known

;; exists_positive			1 / 1
-1 - didn't return early if answer known

;; partial_sums				4 / 4
-2 - didn't call malloc to allocate space
-1 - didn't return a pointer to array
-1 - didn't add one to length of array

;; rotate_right				5 / 5
-4 - did not rotate
-1 - created additional array and copied into it

;; factorization			5 / 5
-2 - didn't factorize properly
-2 - didn't use efficient way to factorize
-1 - called malloc to create second array

;; decode				6 / 6
-2 - used giant switch rather than ASCII math
-2 - didn't call malloc to allocate space
-1 - didn't add 1 to space to allocate
-1 - didn't add '\0' to the end

;; style _subtotal_:                55 / 55


;; graded by Nathaniel Verhaaren


evidence_hw3.c:

/* Karl Jiang
* CMSC 152, Winter 2016
* Lab 3
*/

#include <stdio.h>
#include <stdlib.h>
#include "hw3.h" 

void evidence_all_positive() { 

    printf("Testing all_positive: \n"); 

    int cases = 4; 
    int alen = 3; 
    
    int test [4][3] = {  {1, 2, 8},  {-6, 7, 5}, {0, 6, -1}, 
    {0, 4, 8} }; 
    
    int expt [4] = {1, 0, 0, 0}; 

    for(int i = 0; i < cases; ++i) { 
	printf("expected: %d \t| actual: %d \n", expt[i],
	     all_positive( test[i], alen ) );
    }  
    int corner_one [] = {};
    printf("expected: %d \t| actual: %d \n", 1,
	 all_positive( corner_one, 0 ) );
 
} 


void evidence_exists_positive() { 

    printf("\nTesting exists_positive \n"); 
    
    int test [5][3] = { {-1, -2, -8},  {-6, 7, 5}, {0, 6, -1}, 
    {0, 4, 8}, {0, 0, 0} } ; 
    
    int expt [5] = {0, 1, 1, 1, 0}; 
    
    int cases = 5; 
    int alen = 3; 
    
    for(int i = 0; i < cases; ++i) { 
	printf("expected: %d \t| actual: %d \n", expt[i],
	     exists_positive( test[i], alen ) );
    }  
    int corner_one [] = {};
    printf("expected: %d \t| actual: %d \n", 0,
	 exists_positive( corner_one, 0 ) );
} 


void evidence_first_positive() { 
   
    printf("\nTesting first_positive \n"); 
    
    int test [5][3] = { {-1, -2, -8},  {-6, 7, 5}, {0, 6, -1}, 
    {0, -3, 8}, {0, 0, 0} }; 
    
    int expt [5] = {-1, 1, 1, 2, -1}; 
    
    int cases = 5; 
    int alen = 3; 
    
    for(int i = 0; i < cases; ++i) { 
	printf("expected: %d \t| actual: %d \n", expt[i],
	     first_positive( test[i], alen ) );
    }  
    int corner_one [] = {};
    printf("expected: %d \t| actual: %d \n", -1,
	 first_positive( corner_one, 0 ) );

} 


void evidence_number_positives() { 
   
    printf("\nTesting number_positives \n"); 
    
    int test [5][3] = { {-1, -2, -8},  {-6, 7, 5}, {0, 6, -1}, 
    {2, 6, 5}, {0, 0, 0} }; 
    
    int expt [5] = {0, 2, 1, 3, 0}; 
    
    int cases = 5; 
    int alen = 3; 
    
    for(int i = 0; i < cases; ++i) { 
	printf("expected: %d \t| actual: %d \n", expt[i],
	     number_positives( test[i], alen ) );
    } 
 
    int corner_one [] = {};
    printf("expected: %d \t| actual: %d \n", 0,
	 number_positives( corner_one, 0 ) );

}    
    
void evidence_negate() { 
    
    printf("\nTesting negate \n"); 
    
    int test [5][3] = { {-1, -2, -8},  {-6, 7, 5}, {0, 6, -1}, 
    {0, 0, 0} }; 
    
    int expt [5][3] = { {1, 2, 8},  {6, -7, -5}, {0, -6, 1}, 
    {0, 0, 0} }; 
    
    int cases = 4; 
    int alen = 3; 
    
    for(int i = 0; i < cases; ++i) { 
	printf("expected: "); 
	for(int j = 0; j < alen; ++j) { 
	    printf("%d ", expt[i][j]); 
	} 
	printf("\t|actual: "); 
	negate(test[i], alen); 
	for(int j = 0; j < alen; ++j) { 
	    printf("%d ", test[i][j]); 
	}
	printf("\n");  
    }
} 


void evidence_partial_sums() { 

    printf("\nTesting partial_sums\n"); 
    
    int test [5][3] = { {-1, -2, -8},  {0, 0, 0}, {1, 2, 3}, 
    {-2, 4, -3} };
    
    int expt [5][4] = { {0, -1, -3, -11},  {0, 0, 0, 0}, {0, 1, 3, 6}, 
    {0, -2, 2, -1} }; 
    
    int cases = 4; 
    int alen = 3; 

    for(int i = 0; i < cases; ++i) { 
	printf("expected: "); 
	for(int j = 0; j < alen + 1; ++j) { 
	    printf("%d ", expt[i][j]); 
	} 
	printf("\t|actual: "); 
	int* p_sum = partial_sums(test[i], alen); 
	for(int j = 0; j < alen + 1; ++j) { 
	    printf("%d ", p_sum[j]); 
	}
	printf("\n");  
    } 
    
} 

void evidence_rotate_right() { 

    printf("\nTesting rotate_right \n"); 
    
    int test [5][3] = { {-1, -2, -8},  {-6, 7, 5}, {0, 6, -1}, 
    {0, 0, 0} }; 
    
    int expt [5][3] = { {-8, -1, -2},  {5, -6, 7}, {-1, 0, 6}, 
    {0, 0, 0} }; 
    
    int cases = 4; 
    int alen = 3; 
    
    for(int i = 0; i < cases; ++i) { 
	printf("expected: "); 
	for(int j = 0; j < alen; ++j) { 
	    printf("%d ", expt[i][j]); 
	} 
	printf("\t|actual: "); 
	rotate_right(test[i], alen); 
	for(int j = 0; j < alen; ++j) { 
	    printf("%d ", test[i][j]); 
	}
	printf("\n");  
    } 
} 


void evidence_factorization() { 

    printf("\nTesting factorization\n"); 
    
    unsigned int test [11] = {12, 1, 13, 100, 91, 0, 169, 65535, 14, 2, 3}; 
    char* expt [] = { "2 2 3", " ", "13", "2 2 5 5", "7 13", " ", 
	    "13 13", "3 5 17 257", "2 7", "2", "3"}; 
    int expt_flens [] = {3, 0, 1, 4, 2, 0, 2, 4, 2, 1, 1}; 
    

    for(int i = 0; i < 11; ++i) { //loops for number of tests 
	printf("n: %u \t| expt flens: %d \t| expected: %s \n", 
	    test[i], expt_flens[i], expt[i] ); 
    
	    unsigned int flens = 4; 
	    unsigned int *pflens = &flens; 
	    unsigned int f_input [] = {1, 2, 3, 4}; 

	    factorization(test[i], f_input, pflens);
	    
	    printf("actual flens: %d \t| actual: ", flens);   
	    for(int t = 0; t < flens; ++t) { 
		printf("%d ", f_input[t]); 
	    }
	printf("\n\n"); 
    }  
} 


void evidence_decode() { 
    
    printf("\nTesting decode\n"); 
 
    unsigned int test [4][4] = { {1, 0, 7, 8}, {2, 3, 0, 26},
	 {1, 5, 10, 25}, {28, 4, 7, 8} };       
    char* expt[] = {"A GH\0", "BC Z\0", "AEJY\0", "ERROR\0"};   

    unsigned int alen = 4;  

    for(int i = 0; i < 5; ++i) { 
	printf("expected: %s \t|", expt[i]); 
	printf("actual: "); 
	char *uncoded = decode(test[i], alen); 
	printf("%s\n", uncoded);   
    } 
} 

int main() { 
    
    evidence_all_positive(); 
    evidence_exists_positive();
    evidence_first_positive();  
    evidence_number_positives();
    evidence_negate();  
    evidence_partial_sums(); 
    evidence_rotate_right();
    
    evidence_factorization();  
    evidence_decode(); 
    return 0; 
} 

hw3.c:

/* Karl Jiang 
* CMSC 152, Winter 2016
* Lab 3
*/ 

#include <stdio.h> 
#include <stdlib.h> 

/* returns a pseudo-boolean int representing true if and only if all
* elements of the array a with length alen are positive.
*/
int all_positive(int a[], unsigned int alen) { 

    for(int i = 0; i < alen; ++i) { 
	if(a[i] <= 0) 
	    return 0; 
    } 
    return 1; 
} 

/* returns a pseudo-boolean int representing true if and only if all
* elements of the array a with length alen are positive.
*/
int exists_positive(int a[], unsigned int alen) { 

    for(int i = 0; i < alen; ++i) { 
	if(a[i] > 0) 
	    return 1; 
    } 
    return 0; 
} 

/* returns the index of the first (i.e., with the smallest index)
* element in the array that is positive. If no element is positive,
* returns -1.
*/
int first_positive(int a[], unsigned int alen) { 

    for(int i = 0; i < alen; ++i) { 
	if(a[i] > 0) 
	    return i; 
    } 
    return -1;
} 

/* returns the number of positive numbers in the array. */
unsigned int number_positives(int a[], unsigned int alen) { 
    
    int count = 0; 
    for(int i = 0; i < alen; ++i) { 
	if(a[i] > 0) 
	    count++; 
    } 
    return count;  
} 

/* changes the sign of every element in the array */
void negate(int a[], unsigned int alen) { 
    
    for(int i = 0; i < alen; ++i) { 
	a[i] = -1 * a[i]; 
    }  
} 

/* returns a new array containing partial sums over the provided array */
int* partial_sums(int a[], unsigned int alen) { 
    
    int* partials = (int*) malloc( sizeof(int) * (alen + 1) ); 
    partials[0] = 0; 
    int sum = 0; 

    for(int i = 0; i < alen; ++i) { 
	sum += a[i]; 
	partials[i + 1] = sum; 
    }  
    return partials;   
} 

/* modifies the passed-in array such that each value appears,
* in the updated array, one more spot to the "right" than before
*/
void rotate_right(int a[], int alen) { 

    if(!alen) 
	return; 
    int last  = a[alen - 1]; 
    for(int i = alen - 1; i > 0; --i) { 
	a[i] = a[i - 1]; 
    } 
    a[0] = last; 
} 

  
/* Given int n, updates aray factors [] that contains the factors of n in
ncreasing order of index. Updates flen as well, the number of factors.
* Note that if flen is not large enough, an error will occur.
*/
void factorization(unsigned int n, unsigned int factors[],
unsigned int* flen) { 

    if(n == 0 || n == 1) { 
	*flen = 0;  
	return; 
    } 
    unsigned int div  = 2, num_fact = 0;
    /* Grader: should drop the + 1 or change < to <= in the next line. */
    while(num_fact + 1 < *flen && div * div <= n) {  
	if(n % div == 0) { 
	    factors[num_fact] = div;
	    num_fact++;
	    n = n / div;  
	}  
	else if(div != 2)  
	    div += 2; 
	else //should only run if div = 2, the first value it takes. 
	    div ++; 	   
    } 
    if(div * div > n) { 
	factors[num_fact] = n; 
	num_fact++;  
	*flen = num_fact;  
    } 
    else { 
    	fprintf(stderr, "flen is not large enough."); 
	exit(1); 
    }
    
	 
} 


/* Takes in an array of code numbers and its length and returns
* a string with the decoded message.
*/
char* decode(unsigned int a[], unsigned int alen) { 

    char *code = (char*) malloc( sizeof(char) * (alen + 1) );     
    for(int i = 0; i < alen; ++i) {
	if(!a[i]) 
	    code[i] = ' ';  
	else if(a[i] > 26) { 
	    fprintf(stderr, "code goes beyond standard alpha numerics."); 
	    exit(1); 
	} 
	else 
	    code[i] = 'A' + (a[i] - 1);  
    }
    code[alen] = '\0'; 
    return code;  
} 

hw3.h:

/* returns a pseudo-boolean int representing true if and only if all
* elements of the array a with length alen are positive. 
*/ 
int all_positive(int a[], unsigned int alen);

/* returns a pseudo-boolean int representing true if and only if all 
* elements of the array a with length alen are positive.
*/ 
int exists_positive(int a[], unsigned int alen);

/* returns the index of the first (i.e., with the smallest index) 
* element in the array that is positive. If no element is positive, 
*return -1.
*/ 
int first_positive(int a[], unsigned int alen);

/* returns the number of positive numbers in the array. */ 
unsigned int number_positives(int a[], unsigned int alen);

/* changes the sign of every element in the array */ 
void negate(int a[], unsigned int alen);

/* returns a new array containing partial sums over the provided array */
int* partial_sums(int a[], unsigned int alen);

/* modifies the passed-in array such that each value appears, 
* in the updated array, one more spot to the "right" than before 
*/ 
void rotate_right(int a[], int alen);


//PROBLEM 2 

/* Given int n, updates aray factors [] that contains the factors of n in 
*increasing order of index. Updates flen as well, the number of factors.
* Note that if flen is not large enough, an error will occur. 
*/  
void factorization(unsigned int n, unsigned int factors[], 
unsigned int* flen);

//PROBLEM 3 

/* Takes in an array of code numbers and its length and returns
* a string with the decoded message.
*/ 
char* decode(unsigned int a[], unsigned int alen);







Makefile:

ev : hw3.h hw3.c evidence_hw3.c
	clang -Wall -o ev hw3.c evidence_hw3.c

