
;;  _total_				 83 / 100

AUTOMATIC GRADING (bjr)

TESTS : 

-------------------------
Test: testing split_at : spaces
Point Value: 4
PASSED :  + 4/4 pts
-------------------------

-------------------------
Test: testing split_at : / (single)
Point Value: 3
PASSED :  + 3/3 pts
-------------------------

-------------------------
Test: testing split_at : , (multiple)
Point Value: 3
PASSED :  + 3/3 pts
-------------------------

-------------------------
Test: testing split_at : multiple adjacent delimiters
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: testing add_measurements : Simple addition (matching units)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing add_measurements : Simple addition (matching units, negative)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing add_measurements : Simple addition (matching units)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing scale_measurement : Simple scale
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing scale_measurement : Simple scale
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing scale_measurement : Simple scale
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing multiply_measurement : Simple multiplication
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: testing multiply_measurement : Simple multiplication
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing measurement_tos : Simple tos (exponent 1)
Point Value: 1
FAILED : + 0/1 pts
-------------------------

-------------------------
Test: testing measurement_tos : Simple tos (exponent >1)
Point Value: 1
FAILED : + 0/1 pts
-------------------------

-------------------------
Test: testing measurement_tos : Simple tos (exponent >1)
Point Value: 1
FAILED : + 0/1 pts
-------------------------

-------------------------
Test: testing convert_units : Simple conversion (first conversion in list)
Point Value: 4
PASSED :  + 4/4 pts
-------------------------

-------------------------
Test: testing convert_units : Simple conversion (later conversion in list)
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: testing convert_units : Squared conversion
Point Value: 2
FAILED : + 0/2 pts
-------------------------

-------------------------
Test: testing int_array_new
Point Value: 3
PASSED :  + 3/3 pts
-------------------------

-------------------------
Test: testing int_linked_new
Point Value: 3
PASSED :  + 3/3 pts
-------------------------

-------------------------
Test: testing int_list_nth (arraylist)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing int_list_nth (linkedlist)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing int_list_set (arraylist)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing int_list_set (linkedlist)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing int_list_append (arraylist)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing int_list_append (linkedlist)
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: testing int_list_prepend (arraylist)
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: testing int_list_prepend (linkedlist)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing int_list_show (arraylist)
Point Value: 1
PASSED :  + 1/1 pts
-------------------------

-------------------------
Test: testing int_list_show (arraylist)
Point Value: 2
PASSED :  + 2/2 pts
-------------------------

-------------------------
Test: testing int_list_free
Point Value: 3
PASSED :  + 3/3 pts
-------------------------

-------------------------
Test: testing add_digits
Point Value: 9
FAILED : + 0/9 pts
-------------------------

-------------------------
Expecting error: testing add_measurements : Mismatched units (error)
Point Value: 1
PASSED: Found expected error.
-------------------------

-------------------------
Expecting error: testing multiply_measurement : Mismatched units (error)
Point Value: 1
PASSED: Found expected error.
-------------------------

-------------------------
Expecting error: testing convert_units : Conversion not found (error)
Point Value: 1
PASSED: Found expected error.
-------------------------

-------------------------
Expecting error: testing int_list_nth : out of range (error)
Point Value: 1
PASSED: Found expected error.
-------------------------

-------------------------
Expecting error: testing int_list_set out of range (error)
Point Value: 1
PASSED: Found expected error.
-------------------------

-------------------------
SUMMARY 
Total : 54/68


;; === style ===

;; development process               4 / 4

;; adequate tests                     4 / 4

;; === overall style === ;;		9 / 12

;; well-written purposes              2 / 2
;; proper indentation, line breaks    0 / 2
 -2 - consistently poor indentation
;; well-named variables, functions    1 / 2
 -1 - function name starting with underscore
;; well-chosen types                  2 / 2
;; good design decisions    		2 / 2
;; avoiding blatant inefficiency    	2 / 2

;; === per-function choices === ;; 	12 / 12

;; measurement functions			2 / 2

;; measurement tos			2 / 2

;;  int_list functions		8 / 8




;; style _subtotal_:                29 / 32


;; graded by yuxiaozou



======== hw4.h ========
/* takes in a string s and a delimiter d and splits the string into
 * "words", starting a new word each time the delimiter character occurs.
 * The words are returned in an array of strings.
 */ 
 char** split_at(char* s, char d);

/* represent a measurement that consists of a numeric value and a unit
 * (such * as 56.5 in). 
 */ 
struct measurement{
    double value;
    char* units;
    unsigned int exponent;
}; 
typedef struct measurement measurement; 

/* represents a conversion. For measurements. */ 
struct conversion {
    char *from, *to;
    double mult_by;
}; 
typedef struct conversion conversion; 

/* constructor for measurement */ 
measurement new_m(double v, char* u, unsigned exp);

/* constructor for conversion */  
conversion new_conv(char *fm, char *t, double mult); 

/* simply adds two numbers. Cannot run if they are of different measurements. */ 
 measurement add_measurements(measurement m1, measurement m2);

/* returns a copy of the measurement scaled by the provided factor. */ 
measurement scale_measurement(measurement m, double lambda);

/* multiplies two measurements, must be of same units, but of different exponent.*/ 
measurement multiply_measurements(measurement m1, measurement m2);

/* toString() function for the measurement. Uses the fprintf function to write into 
* the returned string value and strdup to make a heap allocated copy. 
*/ 
char* measurement_tos( measurement m);

/* takes in a list of known conversion factors and its length, a particular measurement,
 * and the units to which we want it to be converted to. Returns propertly converted 
 * and labeled value. 
 */ 
measurement convert_units(conversion* conversions, unsigned int n_conversions,
                        measurement m, char* to);

/* the following data structures allow us to represent a list of 
 * integers either as an array, or as a linked list. 
 */ 
struct int_arraylist {
    int* a;
    unsigned int alen;
}; 
typedef struct int_arraylist int_arraylist; 

typedef struct int_linkedlist int_linkedlist;
struct int_linkedlist {
    int val;
    int_linkedlist* next;
}; 

union int_listunion {
    int_arraylist array;
    int_linkedlist* linked;
};
typedef union int_listunion int_listunion; 

enum int_listtag {
    ARRAY, LINKED
};
typedef enum int_listtag int_listtag; 

struct int_list{
    enum int_listtag tag;
    union int_listunion u;
};
typedef struct int_list int_list;

/* makes new, empty lists in array_list format. */ 
int_list int_array_new();

/* makes new, empty list in linked list format. */ 
int_list int_linked_new();

/* returns the nth value in the provided list, using zero based indexing. */ 
int int_list_nth(struct int_list xs, unsigned int n);

/* ovrewrites the value in the list at the nth index with the specified value. */ 
void int_list_set(struct int_list xs, unsigned int n, int val);

/* appends the given value to the end of the specified list. Note that in the array 
 * case, a new array must be created that is one element longer and free old arr. 
 */ 
void int_list_append(struct int_list* xs, int val);

/* appends the given value to the beggining of the specified list. Note that in the array 
 * case, a new array must be created that is one element longer and free old arr. 
 */ 
void int_list_prepend(struct int_list* xs, int val);

/* prints the contents of the list on the screen, seperated by spaces. */ 
void int_list_show(struct int_list xs);

/* reclaims memory used by the array or by the linked list cells */ 
void int_list_free(struct int_list xs);

/* struct for digitlist, a linked list starting with the ones digit. */ 
typedef struct digitlist digitlist;

struct digitlist {
    unsigned char digit;
    digitlist* next;
};

/* constructor for digitlist - make the first node */ 
digitlist* _new_dlist(unsigned char digit, digitlist* next); 

/* frees the digitlist from the heap. */ 
void _free_digitlist(digitlist* digits); 

/* to string function for digitlist */ 
void _print_digits(digitlist* digits); 

/* adds two digitlists together by adding each node value. */ 
digitlist* add_digits(unsigned char base, digitlist* ds1, digitlist* ds2);

======== hw4.c ========
/* Karl Jiang, karljiang
 * CS 152, Winter 2016
 * HW4 
 */ 

#include <stdio.h> 
#include <stdlib.h> 
#include <string.h> 
#include "hw4.h" 


/* constructor for measurement. */ 
measurement new_m(double v, char* u, unsigned exp) { 
    measurement m; 
    m.value = v; 
    m.units = u; 
    m.exponent = exp;
    return m; 
} 


/* constructor for conversion */  
conversion new_conv(char *fm, char *t, double mult) { 
    conversion c; 
    c.from = fm; 
    c.to = t; 
    c.mult_by = mult; 
    return c; 
} 


/* returns an unsigned int of the number of elements needed in the 
* output of split_at. 
*/ 
unsigned int num_splits(char *s, char d) { 

	int count = 1; 
	
	char *cur_char = s + 1; 
	while(*cur_char != '\0') { 
	    if(*cur_char == d) { 
		    ++count; 
		}
	    cur_char++; 
	} 
	if(*cur_char - 1 == d) 
	    count--; 
	return count; 
} 


/* takes in a string s and a delimiter d and splits the string into
 * "words", starting a new word each time the delimiter character occurs.
 * The words are returned in an array of strings.
 */ 
char** split_at(char* s, char d) { 	
	    
    int num_s = num_splits(s, d); 
    char ** splits = malloc( ( num_s + 1) * sizeof(char*)); //+1 for NULL 
 
    int index = 0; //tracking the number of elements 
    int str_len = 0; //tracks the length of each string   
    char* cur_char = s; //iterates through s 
 
    if(*s != d) 
	str_len++;
    cur_char++; 


    while(*cur_char != '\0') { 
	if(*cur_char == d) {  
	    splits[index] = malloc((str_len + 1) * sizeof(char));
	    strncpy(splits[index], cur_char - str_len, str_len);
	    str_len = 0;  
	    ++index; 
	} 
	else 
	    ++str_len; 
	cur_char++; 
    }  
    
    if(index + 1 < num_s) { //implying last char was not a delim 
	splits[index] = malloc((str_len + 1) * sizeof(char));
	strncpy(splits[index], cur_char - str_len, str_len); 
    }
    
    splits[num_s] = NULL; 
    return splits; 
 }
 

/* simply adds two numbers. Cannot run if they are of different measurements. */ 
measurement add_measurements(measurement m1,  measurement m2) { 

    if(strcmp(m1.units, m2.units) || m1.exponent != m2.exponent) { 
	fprintf(stderr, "Units or exp do not match."); 
	exit(1); 
    } 
    
    return new_m(m1.value + m2.value, strdup(m1.units), m1.exponent); 
} 

/* returns a copy of the measurement scaled by the provided factor. */ 
measurement scale_measurement(measurement m, double lambda) { 
    return new_m(m.value * lambda, strdup(m.units), m.exponent); 
}  

/* multiplies two measurements, must be of same units, but can be of 
* different exponent.
*/ 
measurement multiply_measurements(measurement m1,  measurement m2) { 
 
    if( strcmp(m1.units, m2.units) ) { 
	fprintf(stderr, "Units do not match."); 
	exit(1); 
    } 
    return new_m(m1.value * m2.value, strdup(m1.units), m1.exponent + m2.exponent); 
}  

/* toString() function for the measurement. Uses the fprintf function to write into 
 * the returned string value and strdup to make a heap allocated copy. 
 */ 
char* measurement_tos( measurement m) { 
    
    char buf [30];
    if (m.exponent != 1) 
        sprintf(buf, "%.2lf %s^%u\n", m.value, m.units, m.exponent);  
    else 
        sprintf(buf, "%.2lf %s\n", m.value, m.units);    
    return strdup(buf); 
}


/* takes in a list of known conversion factors and its length, a particular measurement,
 * and the units to which we want it to be converted to. Returns propertly converted 
 * and labeled value. 
 */ 
 measurement convert_units(conversion* conversions, unsigned int n_conversions,
                        measurement m, char* to) { 
   for(int i = 0; i < n_conversions; ++i) {
	if( !(strcmp(conversions[i].from, m.units) ) && 
		!( strcmp(conversions[i].to, to) ) ) { 
	    measurement c_m = new_m(m.value, conversions[i].to, m.exponent); 
	    for(int j = 0; j < m.exponent; ++j) { 
		c_m.value *= conversions[i].mult_by; 
	    }
	    return c_m; 
	} 
    }  
    fprintf(stderr, "No direct conversions avaliable in conversions array."); 
    exit(1); 
}


/* makes new, empty lists in array_list format. */
int_list int_array_new() { 
    int_list a_list; 
    a_list.tag = ARRAY; 
    a_list.u.array.alen = 0; 
    a_list.u.array.a = NULL; 
    return a_list; 
}


/* makes new, empty list in linked list format. */ 
int_list int_linked_new() { 
    int_list i_list;
    i_list.tag = LINKED; 
    i_list.u.linked = NULL; 
    return i_list; 
} 


/* returns the nth value POINTER in the provided list, using zero based indexing. */ 
int * _int_list_nth(int_list xs, unsigned int n) { 
    if(xs.tag == ARRAY) { 
	if(xs.u.array.alen <= n) { 
	    fprintf(stderr, "Requested index beyond size of arraylist"); 
	    exit(1);  
	} 
	return xs.u.array.a + n; 
    }
    
    int_linkedlist* tmp = xs.u.linked; 
    while(n-- && tmp) { 
	tmp = tmp->next; 
    } 
    if(tmp) 
	return &(tmp->val); 
    fprintf(stderr, "Requested index beyond size of linked list.");  
    exit(1);  
}

//* returns the nth value POINTER in the provided list, using zero based indexing. */ 
int int_list_nth(int_list xs, unsigned int n) { 
    return *_int_list_nth(xs, n); 
} 


/* ovrewrites the value in the list at the nth index with the specified value. */ 
void int_list_set(struct int_list xs, unsigned int n, int val) { 
     *_int_list_nth(xs, n) = val;  
}  

/* contructor for a list node */ 
int_linkedlist * _new_ll(int val, int_linkedlist * next) { 
    int_linkedlist* new = (int_linkedlist*) malloc(sizeof(*new));  
    new -> val = val; 
    new -> next = next; 
    return new;  
} 

/* appends the given value to the end of the specified list. Note that in the array 
 * case, a new array must be created that is one element longer and free old arr. 
 */ 
void int_list_append(struct int_list* xs, int val) { 
    if(xs->tag == ARRAY) { 
	xs->u.array.alen++;
	xs->u.array.a = (int *) realloc(xs->u.array.a, xs->u.array.alen * sizeof(int)); 
	xs->u.array.a[xs->u.array.alen - 1] = val; 
	return; 
    }
   
    if(!xs -> u.linked) { 
	xs -> u.linked = _new_ll(val, NULL);
	return; 
    }  
    
    int_linkedlist * cur = xs -> u.linked;
    while(cur -> next != NULL) { 
	cur = cur -> next; 
    } 
    cur -> next = _new_ll(val, NULL); 
} 


/* appends the given value to the beggining of the specified list. Note that in the array 
 * case, a new array must be created that is one element longer and free old arr. 
 */
void int_list_prepend(int_list* xs, int val) { 
    if(xs->tag == ARRAY) { 
	int_arraylist* A = &(xs -> u.array);
	A -> a = realloc(A -> a, ( A -> alen + 1 ) * sizeof(int) );
	for(int i = A -> alen; i; --i) { 
	    A -> a[i] = A -> a[i - 1]; 
	} 
	A -> a[0] = val; 
	A -> alen++; 
	return; 
    }
     xs -> u.linked = _new_ll(val, xs -> u.linked);  
}


/* prints the contents of the list on the screen, seperated by spaces. */
void int_list_show(struct int_list xs) { 
    if(xs.tag == ARRAY) {
	int* a = xs.u.array.a, n = xs.u.array.alen;
	if (!n)
	    return;
	for (int i = 0; i < n - 1; i++)
	    printf("%d ", a[i]);
	printf("%d", a[n - 1]);
	return;
    } 
    int_linkedlist* tmp = xs.u.linked; 
    if (!tmp)
	return;
    for(tmp = xs.u.linked; tmp->next != NULL; tmp = tmp->next) { 
	printf("%d ", tmp->val); 
    } 
    printf("%d", tmp->val); 
} 


/* reclaims memory used by the array or by the linked list cells */ 
void int_list_free(struct int_list xs) { 
    if(xs.tag == ARRAY) { 
	free(xs.u.array.a);	
	return; 
    }  
    int_linkedlist* tmp = xs.u.linked; 
    while(tmp) { 
	int_linkedlist * will_die = tmp; 
	tmp = tmp -> next; 
	free(will_die); 
    }  
}


/* constructor for digitlist - make the first node */ 
digitlist* _new_dlist(unsigned char digit, digitlist* next) { 
    digitlist* new = (digitlist*) malloc(sizeof(*new) ); 
    new -> digit = digit; 
    new -> next = next; 
    return new; 
}   


/* frees the digitlist from the heap. */ 
void _free_digitlist(digitlist* digits) { 
    digitlist* cur = digits; 
    while(cur) { 
	digitlist* willdie = cur; 
	cur = cur -> next; 
	free(willdie); 	
    } 	     
} 


/* to string function for digitlist */ 
void _print_digits(digitlist* digits) { 

    digitlist* tmp = digits; 
    if(!tmp) 
	return;
    int count = 0; 
    for(tmp = digits; tmp != NULL; tmp = tmp -> next) { 
	printf("%d ", tmp -> digit); 
	count++; 
    } 
}


/* adds the remaning digitlist to the sum digitlist */ 
void add_one_digitlist(unsigned char base, digitlist* a, 
	digitlist* cur, unsigned char dig_b) {
   
    unsigned char temp_sum = (a -> digit) + dig_b; 
    
    while(a -> next) { 
	cur -> digit = temp_sum % base; 
	cur -> next = _new_dlist(temp_sum / base, NULL);
	cur = cur -> next; 
	a = a -> next;		
	temp_sum = (cur -> digit) + (a -> digit); 
    }	
    
    cur -> digit = temp_sum % base;
    if(temp_sum / base) { 
	cur -> next = _new_dlist(temp_sum / base, NULL); 
    } 
} 


/* adds two digitlists together by adding each node value. */ 
digitlist* add_digits(unsigned char base, digitlist* ds1, digitlist* ds2) { 
    
    digitlist* sum = _new_dlist(0, NULL); //this will be returned 
    digitlist* cur = sum; //add nodes to sum 
    digitlist* a = ds1; //parse through a 
    digitlist* b = ds2; //parse through b 

    while(a -> next != NULL && b -> next != NULL) { 
	unsigned char temp_sum = cur -> digit + a -> digit + b -> digit; 
	cur -> digit = temp_sum % base; 
	cur -> next = _new_dlist(temp_sum / base, NULL);
	cur = cur -> next; 
	a = a -> next; 
	b = b -> next; 	
    }
    
    if(a -> next) { 
	add_one_digitlist(base, a, cur, b -> digit); 
    } 
    else if(b -> next)
    	add_one_digitlist(base, b, cur, a -> digit); 
     
    else { 
	unsigned char temp_sum = (cur -> digit) + (a -> digit) + 
	    (b -> digit); 
	cur -> digit = temp_sum % base;      
	if(temp_sum / base) { 
	    cur -> next = _new_dlist(temp_sum / base, NULL); 
	} 
    }
    return sum;  
}

======== evidence_hw4.c ========
/* Karl Jiang, karljiang
 * CS 152, Winter 2016 
 * HW4
 */ 

#include <stdio.h> 
#include <stdlib.h> 
#include "hw4.h" 

/* function that tests split_at.*/ 
void evidence_split_at() { 

    printf("\nTesting split_at\n");     

    int cases = 4; 	
    int words = 4; 
    char* tests[5] = {"CMSC 154 = hell." , 
		    "Extra  space.  ", 
		    " tricky   lol ",	
		    "  sanders bern <3 "}; 
    char* expt[4][4] = { {"CMSC", "154", "=", "hell"},
			{"Extra", "", "space.", ""}, 
			{"tricky", "", "", "lol"}, 
			{"", "sanders", "bern", "<3",} };  	

    for(int i = 0; i < cases; ++i) {
	printf("expected: "); 	
	for(int j = 0; j < words; ++j) { 
		 printf("{%s}, ", expt[i][j]); 
	} 
	printf("\nactual: ");
	char** split = split_at(tests[i], ' '); 	
	for(int j = 0; j < words; ++j) {
	    printf("{%s}, ", split[j]); 
	}
	printf("\n\n"); 
    } 	
} 


void print_m(measurement m) {
    if ( m.exponent != 1 )
	printf("%.2lf %s^%u\n", m.value, m.units, m.exponent);  
    else 
    	printf("%.2lf %s\n", m.value, m.units);  
}

/* function for testing add_measurements */ 
void evidence_add_measurements() { 
    
    printf("\nTesting add_measurements.\n"); 
    
    measurement m_arr [] = { {1, "uc", 1}, {2, "swag", 4}, {3, "in", 2}, 
	{8, "ft", 3} };
    measurement m_arr_2 [] = { {2, "uc", 1}, {4, "swag", 4}, {2, "in", 3}, 
	{9, "in", 3} };
    char* expt [] = {"3 uc", "6 swag^4", "Error", "Error"}; 

    print_m( add_measurements( new_m(1, "m", 2), new_m(2, "m", 2) ) );
    for(int i = 0; i < 2; ++i) { 
	printf("expected: %s\t|", expt[i]);
	printf("actual: "); 
	print_m( add_measurements( m_arr[i], m_arr_2[i] ) );  
	printf("\n");  
    } 
    
} 


/* fuction to test scale measurements */ 
void evidence_scale_measurement() { 
    
    printf("\nTesting scale measurement.\n"); 
    measurement m_arr [] = { {1, "uc", 1}, {2, "swag", 4}, {3, "in", 2}, 
	{8, "ft", 3} };
    double factors [] = {5.4, 0, -1.3, 10}; 
    
    for(int i = 0; i < 4; ++i) { 
	print_m( scale_measurement( m_arr[i], factors[i] ) ); 
	printf("\n");  
    }  
}


/* function to test mult measurements */ 
void evidence_multiply_measurements() { 
    printf("\nTesting multiply_measurements.\n"); 
    
    measurement m_arr [] = { {1, "uc", 1}, {2, "swag", 4}, {3, "in", 2}, 
	{8, "ft", 3} };
    measurement m_arr_2 [] = { {2, "uc", 1}, {4, "swag", 4}, {2, "in", 3}, 
	{9, "in", 3} };
    char* expt [] = {"2 uc^2", "8 swag^8", "6 in^5", "Error"}; 

    for(int i = 0; i < 3; ++i) { 
	printf("expected: %s\t|", expt[i]);
	printf("actual: "); 
	print_m( multiply_measurements( m_arr[i], m_arr_2[i] ) );  
	printf("\n");  
    }
}


/* function to test measurement tos. */ 
void evidence_measurement_tos() { 
    
    printf("\nTesting measurement tos\n"); 
    
    measurement m_arr [] = { {1, "uc", 1}, {2, "swag", 4}, {3, "in", 2}, 
	{8, "ft", 3} };
    for(int i = 0; i < 4; ++i) { 	
	printf("expected: "); 
	print_m( m_arr[i] ); 
	printf("actual: %s", measurement_tos( m_arr[i] ) ); 
	printf("\n"); 
    } 
}   


/* function to test convert_units */ 
void evidence_convert_units() { 


    printf("\nTesting convert units\n"); 
    
    conversion convs [] = { {"ft", "in", 12}, {"in", "cm", 2.54} }; 
    measurement m_arr [] = { {1, "ft", 1}, {2, "in", 4}, {3, "ft", 2}, 
	{8, "swag", 3} };
    
    char* to_cm = "cm"; 
    char* to_in = "in"; 

    measurement m_c; 
    m_c = convert_units(convs, 2, m_arr[0], to_in);     
    printf("expected: 12.00 in\t|"); 
    printf("actual: %s", measurement_tos(m_c) ) ; 
    
    m_c = convert_units(convs, 2, m_arr[1], to_cm);     
    printf("expected: %.2f cm^4\t|", 83.2462851); 
    printf("actual: %s", measurement_tos(m_c) ) ; 
    
    m_c = convert_units(convs, 2, m_arr[2], to_in);     
    printf("expected: %d in^2\t|", 432); 
    printf("actual: %s", measurement_tos(m_c) ) ; 

    /* 
    * m_c = convert_units(convs, 2, m_arr[3], to_cm);     
    * printf("expected: ERROR\t|"); 
    * printf("actual: %s", measurement_tos(m_c) ) ; 
    */ 
}

/* general function for testing intlists */ 
void evidence_intlist(int_listtag tag) { 
    
    printf("\nTesting intlist\n"); 
    
    //test empty constructors 
    int_list test; 
    if(tag == ARRAY) { 
	printf("Creating ArrayList.\n"); 
	test = int_array_new(); 
    } 
    else {
	printf("Creating Linkedlist.\n"); 
	test = int_linked_new();  

    }
    
    //test int_list_append. All of these actually count as 10 tests 
    printf("expected: ");   
    for(int i = 0; i < 10; ++i) { 
	int_list_append(&test, i); 
	printf("%d ", i); 
    }
    printf("\nactual: "); 
    int_list_show(test);
    puts(""); 

    //test int_list_nth. 
    for (int i = 0; i < 10; i++)
    	if ( int_list_nth(test, i) != i )
    	    fprintf(stderr, "Mismatch at position %d!\n", i);
    
    //test int_list_set 
    for (int i = 0; i < 10; i++) {
    	int val = rand();
    	int_list_set(test, i, val);
    	if ( int_list_nth(test, i) != val )
    	    fprintf(stderr, "Mismatch at position %d!\n", i);
    }
    
    //test free
    int_list_free(test); 

    //test preprend 
    test = tag == ARRAY ? int_array_new() : int_linked_new();
    printf("expected: "); 
    for (int i = 0; i < 10; i++) { 
    	int_list_prepend(&test, i);	
	printf("%d ", 9 - i); 
    } 
    printf("\nactual: "); 
    int_list_show(test);
    puts("");  
    int_list_free(test);
} 


/* function for testing digitlist */ 
void evidence_digit_list() { 
    printf("\nTesting digitlist\n"); 
    
    digitlist* test = _new_dlist(3, NULL); //test constructor 
    _print_digits(test); //test to string 
    _free_digitlist(test); //test free 
    puts(""); 
    
    digitlist* ds1 = _new_dlist(3, NULL);
    printf("expected: 0 ");  
    for(int i = 2; i >= 0; --i) { 
    	ds1 = _new_dlist(i, ds1);
	printf("%d ", 3 - i); 	
    } 	
    printf("\nactual: "); 
    _print_digits(ds1);
    puts("");  
 
    digitlist* ds2 = _new_dlist(3, NULL); 
    for(int i = 2; i >= 0; --i) 
    	ds2 = _new_dlist(i, ds2);
   
    digitlist* ds3 = _new_dlist(6, NULL); 
    for(int i = 5; i >= 4; --i) 
    	ds3 = _new_dlist(i, ds3);
   
    digitlist* sum = add_digits(10, ds1, ds2); 
    printf("expected: 0 2 4 6\nactual: "); 
    _print_digits(sum); 
    puts(""); 
    
    digitlist* sum2 = add_digits(4, ds1, ds2); 
    printf("expected: 0 2 0 3 1\nactual: "); 
    _print_digits(sum2); 
    puts("");
    
    digitlist* sum3 = add_digits(7, ds2, ds3); 
    printf("expected: 4 6 1 4\nactual: "); 
    _print_digits(sum3); 
    puts("");
} 


int main() { 
    evidence_split_at();
     
    evidence_add_measurements(); 
    evidence_scale_measurement(); 
    evidence_multiply_measurements();
    evidence_measurement_tos(); 
    evidence_convert_units();

    evidence_intlist(ARRAY); 
    evidence_intlist(LINKED); 
 
    evidence_digit_list(); 
    return 0; 
}